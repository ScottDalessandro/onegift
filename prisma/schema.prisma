// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  password    Password?
  notes       Note[]
  roles       Role[]
  sessions    Session[]
  connections Connection[]
  registries  Registry[]
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model Registry {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  title       String
  eventType   String
  eventDate   DateTime
  description String?
  status      String   @default("draft") // draft, active, completed
  planType    String   @default("free")  // free, combined, fullSuite
  
  // Relations
  ownerId      String
  owner        User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  items       RegistryItem[]
  contributions Contribution[]
  withdrawals Withdrawal[]
  
  @@index([ownerId])
  ChildProfile ChildProfile[]
}

model RegistryItem {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  name        String
  description String?
  price       Decimal
  url         String?
  imageUrl    String?
  category    String?
  
  registryId  String
  registry    Registry @relation(fields: [registryId], references: [id], onDelete: Cascade)
  
  @@index([registryId])
}

// prisma/schema.prisma
model Contribution {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  amount      Decimal
  guestName   String
  guestEmail  String?
  message     String?
  status      String   @default("pending") // pending, completed, refunded
  
  registryId  String
  registry    Registry @relation(fields: [registryId], references: [id], onDelete: Cascade)
  
  @@index([registryId])
}

model Withdrawal {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  amount      Decimal
  status      String   @default("pending") // pending, completed, failed
  
  registryId  String
  registry    Registry @relation(fields: [registryId], references: [id], onDelete: Cascade)
  
  @@index([registryId])
}

model ChildProfile {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Basic Info
  name        String
  birthdate   DateTime
  interests   Json  @default("[]")
  dreams      Json  @default("[]")

  // Activities
  currentActivities Json  @default("[]")
  upcomingActivities Json  @default("[]")

  // Milestones from previous year
  milestones  Milestone[]
  
  // Photos
  photos      ProfilePhoto[]

  // Relation to Registry
  registryId  String   @unique
  registry    Registry @relation(fields: [registryId], references: [id], onDelete: Cascade)
}

model Milestone {
  id          String   @id @default(cuid())
  date        DateTime
  title       String
  description String
  
  profileId   String
  profile     ChildProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model ProfilePhoto {
  id          String   @id @default(cuid())
  url         String
  altText     String
  category    String   // 'activity', 'family', 'friends', 'throwback'
  caption     String?
  
  profileId   String
  profile     ChildProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}